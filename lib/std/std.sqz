// 
// Bootstrap library functions for javascript
// 


:error, err,  "Error Handling": <- { :msg ( 

)

:exists <- val ( <- @isDefined(val) )
:valid  <- val ( <- @isDefined(val) & @ val.ok )    

:infer <- val ( 
    ( exists val.types & )
)

:byte arg (  
    :#v 
    :set a ( arg >= -128 &  arg <= 127 ) & :v arg
)

// predefined type are: 

// Enclosure style string type 
:string, str, "String types": <- { :val ? } (
    // private variable data part
    :   name    'string'
    ~   value   '__undef__'
    :   type    str [ 'string', 'str' ] // Type names can be added
    :   init    int8 1
    :   size    int  0
    :   ok      false
    :   err     '__undef__'

    // public static part that have access
    // to the private part and the call arguments 
    <- ( 
        : quotes <- @quotes(..value)
        : get <- :name '' ( 
            <- ..[name] 
        ) 
        : set <- :val  ( 
            ~ ret ? 
            ( val.type = ../name.type  & ../name.mutable & ../value val & size @strSize(val) & ok true ) ^ err `set failed for: ${val}` 
        ) 
    )
)


// :in_range, inRange, "Range check for Arrays and Objects": {
// }



:init, "State of initialization": <- int8 arg (
    :states [ 'declared' | 'defaulted' | 'sealed' ]
    ( states.length >= 0 & states.length <  )
)


:number, num, "Number types": { 
    :number arg  ( 
        ( -> arg =~ /[d\.]+/ ) 
    )

    :digits string arg  ( 
        :#v string ''
        :check, ch, "validate input string": ( -> arg =~ /d+/ )
        :set (  ch arg & :v arg  )

    )

    :int8 arg (  
        :#v 
        :set a ( arg >= -128 &  arg <= 127 ) & :v arg
    )

}

:func, fn, "Function type": {
    :#base, b: {
        :i int8 0 
        :d {} 
        :t [ 'func', 'fn' ]
    }
    :set @isStr(s),  ( 
        :
        :..b.i 1
    )

// :assert {
//     :#base {
//        :i int8 0
//        :v false
//         :t [ 'assert' ]
//    }
// }

}  

:iterate, iter, "Iterate over an Array or Object": <- [] | {} (
    ~i 0
    ~key 0
    ( )
)


>> data -> { :key string , :idx int , :value data.type } ( )

